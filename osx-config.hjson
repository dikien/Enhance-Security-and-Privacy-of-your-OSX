[
    {
        //Check if the System Preferences app is closed -- otherwise, it may override changes this app makes.
        description: "The System Preferences application is currently closed."
        confidence: "required"
        reference: "https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/defaults.1.html"
        tests:
        [
            {
                type: "exact match"
                command: "ps ax | grep -c '/Applications/System Preferences.app/Contents/MacOS/System Preferences'"
                command_pass: "2" //a value of "3" means it's running -- the other 2 are `/bin/sh` and the `grep` command.
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                killall "System Preferences" ; sleep 1
        }
    },

    {
        //System Preferences->Security & Privacy->Firewall->Turn On Firewall
        //Note: This seems to get overwritten logging out/in. See following, user-specific version.
        description: "The OSX application firewall is enabled (system-wide)."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                //Exempt users who are using Little Snitch
                type: "exact match"
                command: little_snitch_is_installed
                command_pass: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/com.apple.alf globalstate"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "defaults -currentHost write /Library/Preferences/com.apple.alf globalstate -bool true"
            sudo_command: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf globalstate -bool true"
        }
    },

    {
        //System Preferences->Security & Privacy->Firewall->Turn On Firewall
        description: "The OSX application firewall is enabled (current user only)."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                //Exempt users who are using Little Snitch
                type: "exact match"
                command: little_snitch_is_installed
                command_pass: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.alf globalstate"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.alf globalstate -bool true"
            # sudo_command: "sudo defaults -currentHost write ~/Library/Preferences/com.apple.alf globalstate -bool true"
        }
    },

    {
        description: "A password is required to wake the computer from sleep or screen saver (system-wide)."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read /Library/Preferences/com.apple.screensaver askForPassword"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "defaults write /Library/Preferences/com.apple.screensaver askForPassword -int 1"
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.screensaver askForPassword -int 1"
        }
    },

    {
        description: "A password is required to wake the computer from sleep or screen saver (current user only)."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read ~/Library/Preferences/com.apple.screensaver askForPassword"
                command_pass: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write ~/Library/Preferences/com.apple.screensaver askForPassword -int 1"
        }
    },

    {
        //System Preferences->Security & Privacy->General->Require password [time interval]
        description: "There is no delay between starting the screen saver and locking the machine (system-wide)."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/com.apple.screensaver askForPasswordDelay"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "defaults -currentHost write /Library/Preferences/com.apple.screensaver askForPasswordDelay -int 0"
            sudo_command: "sudo defaults -currentHost write /Library/Preferences/com.apple.screensaver askForPasswordDelay -int 0"
        }
        undo: "defaults -currentHost write /Library/Preferences/com.apple.screensaver askForPasswordDelay -bool true"
    },

    {
        //System Preferences->Security & Privacy->General->Require password [time interval]
        description: "There is no delay between starting the screen saver and locking the machine (current user only)."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.screensaver askForPasswordDelay"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.screensaver askForPasswordDelay -int 0"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.screensaver askForPasswordDelay -bool true"
    },    

    {
        description: "Logging is enabled for the operating system."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/com.apple.alf loggingenabled"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"

            }
        ]
        fix:
        {
            # command: "defaults -currentHost write /Library/Preferences/com.apple.alf loggingenabled -bool true"
            sudo_command: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf loggingenabled -bool true"
        }
    },

    {
        description: "Homebrew analytics are disabled."
        confidence: "required"
        reference: "https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Analytics.md"
        tests:
        [
            {
                type: "exact match"
                //test based on: https://github.com/Homebrew/brew/blob/master/Library/Homebrew/utils/analytics.sh
                command: "[[ -n $HOMEBREW_NO_ANALYTICS ]] && echo 1 || echo 0"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "echo 'export HOMEBREW_NO_ANALYTICS=1' >> ~/.bash_profile && source ~/.bash_profile"
            manual:
                '''
                1. Bring the Terminal application to the foreground if it is not already. You should see the word "Terminal" in the top left corner of your screen.
                2. Select Terminal->Quit
                3. Re-open the Terminal application and run the tool again; this check should now pass.
                '''
        }
    },

    {
        //System Preferences->Security & Privacy->Firewall->Firewall Options...->Enable Stealth Mode
        //Note: This seems to get overwritten logging out/in. See following, user-specific version.
        description: "Stealth mode is enabled for OSX: Computer does not respond to ICMP ping requests or connection attempts from a closed TCP/UDP port. (system-wide)"
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/com.apple.alf stealthenabled"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true"
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true"
        }
        undo: "sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool false"
    },

    {
        //System Preferences->Security & Privacy->Firewall->Firewall Options...->Enable Stealth Mode
        description: "Stealth mode is enabled for OSX: Computer does not respond to ICMP ping requests or connection attempts from a closed TCP/UDP port. (current user only)"
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.alf stealthenabled"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write ~/Library/Preferences/com.apple.alf stealthenabled -bool true"
            # sudo_command: "sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true"
        }
        undo: "defaults write ~/Library/Preferences/com.apple.alf stealthenabled -bool false"
    },

    {
       //System Preferences->Security & Privacy->Firewall->Firewall Options...->Automatically allow signed software to receive incoming connections
        description: "Automatic whitelisting of Apple-signed applications through the firewall is disabled (system-wide)."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/com.apple.alf allowsignedenabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool false"
            sudo_command: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool false"
        }
        undo: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool true"
    },

    {
        //System Preferences->Security & Privacy->Firewall->Firewall Options...->Automatically allow signed software to receive incoming connections
        description: "Automatic whitelisting of Apple-signed applications through the firewall is disabled (current user only)."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.alf allowsignedenabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.alf allowsignedenabled -bool false"
        }
        undo: "defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool true"
    },

    {
        description: "OpenSSL is up to date."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "openssl version"
                command_pass: "OpenSSL 1.0.2h  3 May 2016"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "brew update ; brew install openssl ; brew upgrade openssl ; bash ./scripts/set_openssl_latest_path.sh"
            manual:
                '''
                1. Bring the Terminal application to the foreground if it is not already. You should see the word "Terminal" in the top left corner of your screen.
                2. Select Terminal->Quit
                3. Re-open the Terminal application and run the tool again; this check should now pass.
                '''
        }
    },

    {
        description: "Hidden files are displayed in Finder."
        confidence: "required"
        reference: "http://lifehacker.com/the-best-hidden-settings-you-can-unlock-with-os-xs-ter-1476627111"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read com.apple.finder AppleShowAllFiles"
                command_pass: "TRUE"
                command_fail: "FALSE"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write com.apple.finder AppleShowAllFiles TRUE && killall Finder"
            # sudo_command: "sudo defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.finder AppleShowAllFiles -bool true && killall Dock"
        }
        undo: "defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.finder AppleShowAllFiles -bool false && killall Dock"
    },

    # {
    #     description: "All application software is currently up to date."
    #     confidence: "recommended"
    #     reference: "https://github.com/SummitRoute/osxlockdown/"
    #     tests:
    #     [
    #         {
    #             type: "regex match"
    #             command:"softwareupdate -l"
    #             command_pass: "No new software available."
    #             case_sensitive: "false"
    #         }
    #     ]
    #     fix:
    #     {
    #         # command: "softwareupdate -i -a"
    #         sudo_command: "sudo softwareupdate -i -a"
    #         manual:
    #             '''
    #             1. App Store -> Update
    #             '''
    #     }
    # },

    {
        //System Preferences: App Store: Automatically check for updates
        description: "Automatic check for software updates is enabled."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/"
        tests:
        [
            {
                type: "exact match"
                command: "sudo softwareupdate --schedule | grep -i 'Automatic check is on'"
                command_pass: "Automatic check is on"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "softwareupdate --schedule on"
            sudo_command: "sudo softwareupdate --schedule on"
        }
    },

    {
        description: "Enable Auto Update."
        confidence: "recommended"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command: "sudo defaults read /Library/Preferences/com.apple.SoftwareUpdate AutomaticCheckEnabled"
                command_pass: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate AutomaticCheckEnabled -int 1"
        }
    },

    {
        //System Preferences->Security & Privacy->General->Allow apps downloaded from
        description: "GateKeeper protection against untrusted applications is enabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "spctl --status | grep -i 'assessments enabled'"
                command_pass: "assessments enabled"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "spctl --master-enable"
            sudo_command: "sudo spctl --master-enable"
        }
        undo: "sudo spctl --master-disable"
    },

    {
        //System Preferences->Bluetooth->Turn Bluetooth Off
        description: "Bluetooth is disabled."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read /Library/Preferences/com.apple.Bluetooth ControllerPowerState"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool false; killall -HUP blued"
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool false; sudo killall -HUP blued"
        }
        undo: "sudo defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool true; killall -HUP blued"
    },

    {
        description: "The infrared receiver is disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool false"
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool false"
        }
        undo: "sudo defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool true"
    },

    {
        description: "AirDrop file sharing is disabled."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read /Library/Preferences/com.apple.NetworkBrowser DisableAirDrop"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.NetworkBrowser DisableAirDrop -bool true"
        }
        undo: "sudo defaults write /Library/Preferences/com.apple.NetworkBrowser DisableAirDrop -bool false"
    },

    {
        //System Preferences->Sharing->File Sharing
        description: "File sharing is disabled."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -n "$(launchctl list | egrep AppleFileServer)" ]; then exit 1; fi; if [ -n "$(grep -i array /Library/Preferences/SystemConfiguration/com.apple.smb.server.plist)" ]; then echo 1; exit; fi; echo 0; exit
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "launchctl unload -w /System/Library/LaunchDaemons/com.apple.AppleFileServer.plist; launchctl unload -w /System/Library/LaunchDaemons/com.apple.smbd.plist"
        }
    },

    {
        //System Preferences->Sharing->Printer Sharing
        description: "Printer sharing is disabled."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -n "$(system_profiler SPPrintersDataType | grep Shared | grep Yes)" ]; then echo 1; exit; fi; if [ -n "$(system_profiler SPPrintersDataType | grep 'System Printer Sharing: Yes')" ]; then echo 1; exit; fi; echo 0; exit
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "cupsctl --no-share-printers"
        }
    },

    {
        //System Preferences->Sharing->Remote Login
        description: "Remote login is disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "sudo systemsetup -getremotelogin"
                command_pass: "Remote Login: Off"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "systemsetup -f -setremotelogin off"
            sudo_command: "sudo systemsetup -f -setremotelogin off"
        }
        undo: "sudo systemsetup -f -setremotelogin on"
    },

    {
        //System Preferences->Sharing->Remote Management
        description: "Remote Management is disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -n "$(ps -ef | egrep "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/MacOS/[A]RDAgent")" ]; then echo 1; exit; fi; echo 0; exit
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop"
            sudo_command: "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop"
        }
    },

    {
        //System Preferences->Sharing->Remote Apple Events
        //See: https://support.apple.com/kb/PH18721?locale=en_US
        description: "Remote Apple events are disabled."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command: "sudo systemsetup -getremoteappleevents"
                command_pass: "Remote Apple Events: Off"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command: "systemsetup -setremoteappleevents off"
        }
        undo: "sudo systemsetup -setremoteappleevents on"

    },

    {
        //System Preferences->Sharing->Internet Sharing
        description: "Internet Sharing is disabled on all network interfaces."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read /Library/Preferences/SystemConfiguration/com.apple.nat NAT | grep -c 'Enabled = 1'"
                command_pass: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            # command: "defaults write /Library/Preferences/SystemConfiguration/com.apple.nat NAT -dict-add Enabled -bool false"
            sudo_command: "sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.nat NAT -dict-add Enabled -bool false"
        }
    },

    {
        //System Preferences->Energy Saver->Wake for network access
        description: "Wake on Network Access feature is disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "sudo systemsetup getwakeonnetworkaccess"
                command_pass: "Wake On Network Access: Off"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command: "sudo systemsetup -setwakeonnetworkaccess off"
        }
        undo: "sudo systemsetup -setwakeonnetworkaccess on"
    },

    {
        //There are a number of attacks based on IPv6 use. For the sake of simplicity, it's best to disable it entirely unless it is required. See: https://www.ernw.de/download/ERNW_Hardening_IPv6_MacOS-X_v1_0.pdf
        description: "IPv6 is disabled on all network interfaces."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command:
                    networksetup -listallnetworkservices | while read i; do SUPPORT=$(networksetup -getinfo "$i" | grep "IPv6: Automatic") && if [ -n "$SUPPORT" ]; then echo 1; fi; done; echo 0; exit
                command_pass: "0"
                //command_fail would be one or more instances of the character "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                networksetup -listallnetworkservices | while read i; do SUPPORT=$(networksetup -getinfo "$i" | grep "IPv6: Automatic") && if [ -n "$SUPPORT" ]; then networksetup -setv6off "$i"; fi; done;
        }
    },

    {
        description: "An administrator password is required to change system-wide preferences."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -n "$(security authorizationdb read system.preferences 2> /dev/null | grep -A1 shared | grep -E '(true|false)' | grep 'false')" ]; then echo 0; else echo 1; fi
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            //TODO: Add warning to user before fix command is run that she will be prompted for her admin credentials. this requires a new field
            command:
                security authorizationdb read system.preferences > /tmp/system.preferences.plist &&/usr/libexec/PlistBuddy -c "Set :shared false" /tmp/system.preferences.plist && security authorizationdb write system.preferences < /tmp/system.preferences.plist
        }
    },

    {
        description: "Documents are not stored to iCloud Drive by default. (May be mistaken if iCloud is disabled)"
        confidence: "required"
        reference: "http://mjtsai.com/blog/2014/10/26/yosemite-uploads-unsaved-documents-and-recent-addresses-to-icloud/"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read NSGlobalDomain NSDocumentSaveNewDocumentsToCloud"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false"
        }
        undo: "defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool true"
    },

    {
        description: "The File Vault key is protected when going to standby mode."
        //Once this set of configurations is proven stable, this can be upgraded from "experimental" to "recommended". We may want to warn the user first that waking will be slower and require authenticating twice.
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "bash ./scripts/DestroyFVKeyOnStandby_check.sh"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            //Additional configurations are required to make this setting not fight with powernap/standby/autopoweroff. See: https://github.com/drduh/OS-X-Security-and-Privacy-Guide/issues/124
            sudo_command: "sudo pmset -a destroyfvkeyonstandby 1 ; sudo pmset -a hibernatemode 25 ; sudo pmset -a powernap 0 ; sudo pmset -a standby 0 ; sudo pmset -a standbydelay 0; sudo pmset -a autopoweroff 0"
        }
    },

    {
        description: "git is up to date or is not installed"
        confidence: "recommended"
        tests:
        [
            {
                type: "regex match"
                command: "git"
                command_pass: "xcode.*"
                case_sensitive: "false"
            }
            {
                type: "regex match"
                command: "git --version"
                command_pass: ".*(command not found|2\\.10\\.0).*"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            //Only "fix" this PATH preference if we haven't already applied the
            //fix to the ~/.profile file. Otherwise, the user will need to
            //restart Terminal in order for this take effect.
            command:
                brew update ; brew install git ; brew upgrade git ; python ./scripts/set_path_precedence.py "/usr/local/bin" "/usr/bin"
            manual:
                '''
                1. Bring the Terminal application to the foreground if it is not already. You should see the word "Terminal" in the top left corner of your screen.
                2. Select Terminal->Quit
                3. Re-open the Terminal application and run the tool again; this check should now pass.
                '''
        }
    },

    {
        description: "The curl utility is up to date or absent from the system."
        confidence: "recommended"
        tests:
        [
            {
                type: "regex match"
                command: "curl --version"
                command_pass: ".*(command not found|7\\.49\\.0).*"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                brew update ; brew install curl ; brew upgrade curl ; python ./scripts/set_path_precedence.py "/usr/local/bin" "/usr/bin"
        }
        undo: "brew unlink curl"
    },

    {
        description: "FileVault file system encryption is enabled."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "regex match"
                command: "fdesetup status -verbose"
                command_pass: "^.*FileVault is On.*$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            /*
             * I'm disabling the fixes below for now, because the decryption key
             * that the user should back up is printed to STDOUT. See:
             * https://derflounder.wordpress.com/2013/10/22/managing-mavericks-filevault-2-with-fdesetup/
             * https://github.com/SummitRoute/osxlockdown/blob/master/commands.yaml
             */
            //command: "fdesetup enable"
            //sudo_command: "sudo fdesetup enable"
            manual:
                '''
                1. Open System Preferences.
                2. Select "Security & Privacy"
                3. Select "FileVault".
                4. Click the "Turn On FileVault" button and follow the instructions.
                5. Decline to use iCloud or other Apple accounts for login. Instead, allow it to generate an offline decryption key. Store your decryption key somewhere safe so that you can decrypt your hard drive if something breaks, but prevent your enemies from acquiring yoru decryption key.
                '''
        }
        undo: ""
    },

    {
        //System Preferences->Desktop & Screen Saver->Start after
        description: "The idle timer for screen saver activation is set to 10 minutes or less."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "regex match"
                //This is a clever way for polling settings for multiple users from the current logged in user :-)
                command:
                    UUID=`ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | sed -e 's/^.*"\(.*\)"$/\1/'`; for i in $(find /Users -type d -maxdepth 1); do PREF=$i/Library/Preferences/ByHost/com.apple.screensaver.$UUID; if [ -e $PREF.plist ]; then TIMEOUT=$(defaults read $PREF.plist idleTime) && if [ $TIMEOUT -eq 0 ] || [ $TIMEOUT -gt 600 ]; then echo 1; fi; else echo 0; fi; done;
                command_pass: "^(0\n*)+$" //all zeroes
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                UUID=`ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | sed -e 's/^.*"\(.*\)"$/\1/'`; for i in $(find /Users -type d -maxdepth 1); do PREF=$i/Library/Preferences/ByHost/com.apple.screensaver.$UUID; if [ -e $PREF.plist ]; then defaults -currentHost write $PREF.plist idleTime -int 600; fi; done
        }
    },

    {
        description: "System Integrity Protection (SIP) is enabled."
        confidence: required
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide#system-integrity-protection"
        tests:
        [
            {
                type: "exact match"
                command: "csrutil status"
                command_pass: "System Integrity Protection status: enabled."
                case_sensitive: false
            }
        ]
        fix:
        {
            manual:
                '''
                1. SIP should be enabled by default on your El Capitan machine. You must boot into "Recovery OS" in order to use the "csrutil enable" command. See: https://derflounder.wordpress.com/2015/10/01/system-integrity-protection-adding-another-layer-to-apples-security-model/
                '''
        }
    }

    {
        description: "Enable Set time and date automatically"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    sudo systemsetup -getnetworktimeserver
                command_pass: "Network Time Server: on"
                //command_fail would be one or more instances of the character "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo systemsetup -setnetworktimeserver on
        }
    },

    {
        description: "Disable 'Wake for network access'"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    pmset -c -g | grep womp
                command_pass: "womp                 0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo pmset -a womp 0
        }
    },

    {
        description: "Enable Secure Keyboard Entry in terminal.app"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    defaults read -app Terminal SecureKeyboardEntry
                command_pass: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                defaults write -app Terminal SecureKeyboardEntry -int 1
        }
    },

    {
        description: "Configure secure Empty Trash"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    defaults read com.apple.finder EmptyTrashSecurely
                command_pass: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                defaults write com.apple.finder EmptyTrashSecurely -bool true
        }
    },

    {
        description: "Retain system.log for 365 or more days"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    cat /etc/asl.conf | grep -i "system.log mode" | grep "file_max=100M" | wc -l
                command_pass: ".*1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command: "sudo cp /etc/asl.conf conf/asl.conf.bk && sudo cp conf/asl.conf /etc/asl.conf"
            manual:
                '''
                1. sudo nano /etc/asl.conf 
                2. check out if system.log setting is "system.log mode=0640 format=bsd rotate=seq compress file_max=100M all_max=1000M"
                '''
        }
    },

    {
        description: "Retain appfirewall.log for 365 or more days"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    cat /etc/asl.conf | grep -i "appfirewall.log" | grep "file_max=100M" |  wc -l
                command_pass: ".*1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command: "sudo cp /etc/asl.conf conf/asl.conf.bk && sudo cp conf/asl.conf /etc/asl.conf"
            manual:
                '''
                1. sudo nano /etc/asl.conf 
                2. check out if appfirewall.log setting is "? [= Facility com.apple.alf.logging] file appfirewall.log file_max=100M all_max=1000M rotate=seq"
                '''
        }
    },

    {
        description: "Retain authd.log for 365 or more days"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    cat /private/etc/asl/com.apple.authd | grep -i "authd.log" | grep "file_max=100M" |  wc -l
                command_pass: ".*1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command: "sudo cp /private/etc/asl/com.apple.authd conf/com.apple.authd.bk && sudo cp conf/com.apple.authd /etc/asl/com.apple.authd"
            manual:
                '''
                1. sudo nano /private/etc/asl/com.apple.authd 
                2. check out if authd.log is "* file /var/log/authd.log mode=0640 compress format=bsd rotate=seq file_max=100M all_max=1000M"
                '''
        }
    },

    {
        description: "Configure Security Auditing Flags"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    sudo egrep "^flags:" /etc/security/audit_control
                command_pass: "flags:lo,aa,ad,fd,fm"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command : "sudo cp /etc/security/audit_control /etc/security/audit_control.bk && sudo cp conf/audit_control /etc/security/audit_control"
            manual:
                '''
                1. sudo nano /etc/security/audit_control
                2. check out if setting is "flags:lo,aa,ad,fd,fm"
                '''
        }
    },

    {
        description: "Retain install.log for 365 or more days"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    cat /etc/asl/com.apple.install | grep -i "file /var/log/install.log"
                command_pass: "* file /var/log/install.log format=bsd ttl=365"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command : "sudo cp /etc/asl/com.apple.install /etc/asl/com.apple.install.bk && sudo cp conf/com.apple.install /etc/asl/com.apple.install"
            manual:
                '''
                1. sudo nano /etc/asl/com.apple.install
                2. check out if setting is "* file /var/log/install.log format=bsd ttl=365"
                '''
        }
    },

    {
        description: "Ensure http server is not running"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    ps -ef | grep -i httped | wc -l
                command_pass: "2"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                '''
                1. sudo apachectl stop"
                '''
        }
    },

    {
        description: "Ensure ftp server is not running"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    sudo launchctl list | grep ftp | wc -l
                command_pass: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo launchctl unload -w /System/Library/LaunchDaemons/ftp.plist
        }
    },

    {
        description: "Ensure nfs server is not running"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    ps -ef | grep -i nfsd | wc -l
                command_pass: "2"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo nfsd disable
        }
    },

    {
        description: "Disable automatic login"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    defaults read /Library/Preferences/com.apple.loginwindow | grep autoLoginUser
                command_pass: ""
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                defaults delete /Library/Preferences/com.apple.loginwindow autoLoginUser
        }
    },

    {
        description: "Require an administrator password to access system-wide preferenes"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    security authorizationdb read system.preferences 2> /dev/null | grep -A1 shared | grep -E '(treu|false)'
                command_pass: ".*false"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                defaults delete /Library/Preferences/com.apple.loginwindow autoLoginUser
        }
    },

    {
        description: "Disable ability to login to another user's active and locked session"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    grep -i "group=admin,wheel fail_safe" /etc/pam.d/screensaver
                command_pass: ""
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command : "sudo cp /etc/pam.d/screensaver /etc/pam.d/screensaver.bk && sudo cp conf/screensaver /etc/pam.d/screensaver"
            manual:
                '''
                1. sudo vi /etc/pam.d/screensaver
                2. Locate account    required       pam_group.so no_warn group=admin,wheel fail_safe
                3. Remove "admin"
                '''
        }
    },

    {
        description: "Complex passwords must contain an Alphabetic Character"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    pwpolicy -getglobalpolicy | tr " " "\n" | grep requiresAlpha
                command_pass: ".*requiresAlpha=1.*"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo pwpolicy -n /Local/Default -setglobalpolicy "maxFailedLoginAttempts=40 minChars=10 requiresNumeric=1 requiresAlpha=1 requiresSymbol=1 maxMinutesUntilChangePassword=259200 usingHistory=5"
        }
    },

    {
        description: "Complex passwords must contain an Numeric Character"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    pwpolicy -getglobalpolicy | tr " " "\n" | grep requiresNumeric
                command_pass: ".*requiresNumeric=1.*"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo pwpolicy -n /Local/Default -setglobalpolicy "maxFailedLoginAttempts=40 minChars=10 requiresNumeric=1 requiresAlpha=1 requiresSymbol=1 maxMinutesUntilChangePassword=259200 usingHistory=5"
        }
    },

    {
        description: "Complex passwords must contain an Symbolic Character"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    pwpolicy -getglobalpolicy | tr " " "\n" | grep requiresSymbol
                command_pass: ".*requiresSymbol=1.*"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo pwpolicy -n /Local/Default -setglobalpolicy "maxFailedLoginAttempts=40 minChars=10 requiresNumeric=1 requiresAlpha=1 requiresSymbol=1 maxMinutesUntilChangePassword=259200 usingHistory=5"
        }
    },

    {
        description: "Set a minimum password length"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    pwpolicy -getglobalpolicy | tr " " "\n" | grep minChars
                command_pass: ".*minChars=1.*"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo pwpolicy -n /Local/Default -setglobalpolicy "maxFailedLoginAttempts=40 minChars=10 requiresNumeric=1 requiresAlpha=1 requiresSymbol=1 maxMinutesUntilChangePassword=259200 usingHistory=5"
        }
    },

    {
        description: "Set a password using history"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    pwpolicy -getglobalpolicy | tr " " "\n" | grep usingHistory
                command_pass: ".*usingHistory=5.*"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo pwpolicy -n /Local/Default -setglobalpolicy "maxFailedLoginAttempts=40 minChars=10 requiresNumeric=1 requiresAlpha=1 requiresSymbol=1 maxMinutesUntilChangePassword=259200 usingHistory=5"
        }
    },

    {
        description: "Password expiration period"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    pwpolicy -getglobalpolicy | tr " " "\n" | grep maxMinutesUntilChangePassword
                command_pass: ".*maxMinutesUntilChangePassword=259200.*"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo pwpolicy -n /Local/Default -setglobalpolicy "maxFailedLoginAttempts=40 minChars=10 requiresNumeric=1 requiresAlpha=1 requiresSymbol=1 maxMinutesUntilChangePassword=259200 usingHistory=5"
        }
    },

    {
        description: "Configure account lockout threshold"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "regex match"
                command:
                    pwpolicy -getglobalpolicy | tr " " "\n" | grep maxFailedLoginAttempts
                command_pass: ".*maxFailedLoginAttempts=40.*"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo pwpolicy -n /Local/Default -setglobalpolicy "maxFailedLoginAttempts=40 minChars=10 requiresNumeric=1 requiresAlpha=1 requiresSymbol=1 maxMinutesUntilChangePassword=259200 usingHistory=5"
        }
    },

    {
        description: "Display login window as name and password"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    defaults read /Library/Preferences/com.apple.loginwindow SHOWFULLNAME
                command_pass: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo defaults write /Library/Preferences/com.apple.loginwindow SHOWFULLNAME -bool yes
        }
    },

    {
        description: "Disable 'Show password hints'"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    defaults read /Library/Preferences/com.apple.loginwindow RetriesUntilHint
                command_pass: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo defaults write /Library/Preferences/com.apple.loginwindow RetriesUntilHint -int 0
        }
    },

    {
        description: "Disable guest account login"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    defaults read /Library/Preferences/com.apple.loginwindow GuestEnabled
                command_pass: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo defaults write /Library/Preferences/com.apple.loginwindow GuestEnabled -bool NO
        }
    },

    {
        description: "Disable 'Allow guests to connect to shared folders'(AFP)"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    defaults read /Library/Preferences/com.apple.AppleFileServer | grep -i guest
                command_pass: "guestAccess = 0;"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo defaults write /Library/Preferences/com.apple.AppleFileServer guestAccess -bool no
        }
    },

    {
        description: "Disable 'Allow guests to connect to shared folders'(SMB)"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    defaults read /Library/Preferences/SystemConfiguration/com.apple.smb.server |grep -i guest
                command_pass: "AllowGuestAccess = 0;"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command:
                sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server AllowGuestAccess -bool no
        }
    },

    {
        description: "Turn on filename extensions"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    defaults read NSGloablDomain AppleShowALLExtensions
                command_pass: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                defaults write NSGloablDomain AppleShowALLExtensions -bool true
        }
    },

    {
        description: "Check System folder for world writable files"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    sudo find /System -type d -perm -2 -ls | grep -v "Public/Drop Box"
                command_pass: ""
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                "sudo chmod -R o-w /Bad/Directory"
        }
    },

    {
        description: "Check Library folder for world writable files"
        confidence: "required"
        reference: "https://benchmarks.cisecurity.org/tools2/osx/CIS_Apple_OSX_10.10_Benchmark_v1.0.0.pdf"
        tests:
        [
            {
                type: "exact match"
                command:
                    sudo find /Library -type d -perm -2 -ls | grep -v Caches
                command_pass: ""
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                "sudo chmod -R o-w /Bad/Directory"
        }
    },

    {
        description: "Check Anti Virus is running"
        confidence: "required"
        reference: ""
        tests:
        [
            {
                type: "regex match"
                command:
                    ps -ef | grep kav_agent | wc -l
                command_pass: ".*3"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                "Install Anti Virus"
        }
    },

    {
        description: "Check OpenDNS is running"
        confidence: "required"
        reference: ""
        tests:
        [
            {
                type: "regex match"
                command:
                    ps -ef | grep OpenDNS | wc -l
                command_pass: ".*4"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                "Install OpenDNS"
        }
    },

    {
        description: "Check osquery is running"
        confidence: "required"
        reference: ""
        tests:
        [
            {
                type: "regex match"
                command:
                    ps -ef | grep osquery | wc -l
                command_pass: ".*4"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                "Install osquery"
        }
    },

    {
        description: "Check logstash is running"
        confidence: "required"
        reference: ""
        tests:
        [
            {
                type: "regex match"
                command:
                    ps -ef | grep logstash | wc -l
                command_pass: ".*3"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                "Install logstash"
        }
    },

    {
        description: "Reduce the sudo timeout period"
        confidence: "recommended"
        reference: ""
        tests:
        [
            {
                type: "regex match"
                command:
                    sudo cat /etc/sudoers | grep timestamp=0 | wc -l
                command_pass: ".*2"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                '''
                Run the following command in Terminal : sudo visudo
                Add the line : Defaults timestamp_timeout=0

                '''
        }
    },

    /* ---- END SYSTEM SETTINGS ---- */

    /* ---BEGIN SAFARI BROWSER SETTINGS--- */

    {
        //Check if the Safari app is closed -- otherwise, it may override changes this app makes.
        description: "The Safari application is currently closed."
        confidence: "required"
        reference: "https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/defaults.1.html"
        tests:
        [
            {
                type: "exact match"
                command: "ps ax | grep -c '/Applications/Safari.app/Contents/MacOS/Safari'"
                command_pass: "2" //a value of "3" means it's running -- the other 2 are `/bin/sh` and the `grep` command.
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                killall "Safari" ; sleep 1
        }
    },

    {
        //Safari->Preferences->AutoFill->Credit cards
        description: "Safari will not auto-fill credit card data."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillCreditCardData"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillCreditCardData -bool false"
        }
    },

    {
        //Safari->Preferences->AutoFill->Using info from my Contacts card
        description: "Safari will not auto-fill your contact data."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillFromAddressBook"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillFromAddressBook -bool false"
        }
    },

    {
        //Safari->Preferences->AutoFill->Other forms
        description: "Safari will not auto-fill miscellaneous forms."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillMiscellaneousForms"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillMiscellaneousForms -bool false"
        }
    },

    {
        //Safari->Preferences->AutoFill->User names and passwords
        description: "Safari will not auto-fill usernames or passwords."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillPasswords"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillPasswords -bool false"
        }
    },

    {
        //Safari->Preferences->General->Open "safe" files after downloading
        description: "Files downloaded in Safari are not automatically opened."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads -bool false"
        }
    },

    {
        //Safari->Preferences->Privacy->Cookies and website data->Always block
        description: "Cookies and local storage are always blocked in Safari."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari BlockStoragePolicy"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari BlockStoragePolicy -bool false"
        }
    },

    {
        //Safari->Develop->Disable Extensions
        //Note: Extensions are often a persistence mechanism for browser-based malware.
        description: "Safari extensions are disabled."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari ExtensionsEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari ExtensionsEnabled -bool false"
        }
    },

    {
        //Safari->Preferences->Security->Fraudulent sites->Warn when visiting a fraudulent website
        description: "The Safari web browser will warn when visiting known fraudulent websites."
        //I'm setting this to recommended for on the basis that there is like a privacy trade-off
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites -bool true"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites -bool false"
    },

    {
        //Safari->Preferences->Security->Web Content->Enable JavaScript
        description: "JavaScript is disabled in the Safari web browser."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled -bool true"
    },

    {
        //Safari->Preferences->Security->Web Content->Block pop-up windows
        description: "Pop-up windows are blocked in the Safari web browser."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool true"
    },

    {
        //Safari->Preferences->Security->Web Content->Allow WebGL
        description: "The WebGL plug-in is disabled in the Safari web browser."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2WebGLEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2WebGLEnabled -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2WebGLEnabled -bool true"
    },

    {
        //Safari->Preferences->Security->Internet plug-ins->Allow Plug-ins
        description: "Plug-ins are disabled in the Safari web browser."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool true"
    },

    {
        //Safari->Preferences->Security->Internet plug-ins->Plug-in Settings...->When visiting other websites
        description: "Plug-ins are blocked by default in the Safari web browser unless a site is explicitly added to a list of allowed sites."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari PlugInFirstVisitPolicy"
                command_pass: "PlugInPolicyBlock"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari PlugInFirstVisitPolicy PlugInPolicyBlock"
        }
    },

    {
        //Safari->Preferences->Security->Internet plug-ins->Plug-in Settings...->Java->When visiting other websites->Block
        description: "The Java plug-in for Safari web browser is blocked unless a site is explicitly added to a list of allowed sites."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                //Note: dictionary values for PList fields are easier to handle with `PlistBuddy` instead of `defaults`.
                command:
                    /usr/libexec/PlistBuddy -c "Print :ManagedPlugInPolicies:com.oracle.java.JavaAppletPlugin:PlugInFirstVisitPolicy" ~/Library/Preferences/com.apple.Safari.plist
                command_pass: "PlugInPolicyBlock"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                /usr/libexec/PlistBuddy -c "Add :ManagedPlugInPolicies dict" ~/Library/Preferences/com.apple.Safari.plist ; /usr/libexec/PlistBuddy -c "Add :ManagedPlugInPolicies:com.oracle.java.JavaAppletPlugin dict" ~/Library/Preferences/com.apple.Safari.plist ; /usr/libexec/PlistBuddy -c "Add :ManagedPlugInPolicies:com.oracle.java.JavaAppletPlugin:PlugInFirstVisitPolicy string PlugInPolicyBlock" ~/Library/Preferences/com.apple.Safari.plist; /usr/libexec/PlistBuddy -c "Set :ManagedPlugInPolicies:com.oracle.java.JavaAppletPlugin:PlugInFirstVisitPolicy PlugInPolicyBlock" ~/Library/Preferences/com.apple.Safari.plist
        }
    },

    {
        //Safari->Preferences->Security->Internet plug-ins->Plug-in Settings...->Java
        description: "The Java plug-in is disabled in the Safari web browser."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool true"
    },

    {
        //Safari->Develop->Treat SHA-1 Certificates as Insecure
        description: "The Safari web browser is configured to treat SHA-1 certificates as insecure."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari TreatSHA1CertificatesAsInsecure"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari TreatSHA1CertificatesAsInsecure -bool true"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari TreatSHA1CertificatesAsInsecure -bool false"
    },

    {
        //Safari->Preferences->Search->Preload Top Hit in the background
        description: "The Safari web browser will not pre-load webpages that rank highly as search matches."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari PreloadTopHit"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari PreloadTopHit -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari PreloadTopHit -bool true"
    },

    {
        //Safari->Preferences->Search->Search engine->Include search engine suggestions
        description: "The Safari web browser will not include search engine suggestions for text typed in the location bar."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari SuppressSearchSuggestions"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SuppressSearchSuggestions -bool true"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SuppressSearchSuggestions -bool false"
    },

    {
        //Safari->Preferences->Search->Smart Search Field->Include Safari Suggestions
        description: "The Safari web browser's search suggestions are disabled."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari UniversalSearchEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari UniversalSearchEnabled -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari UniversalSearchEnabled -bool true"
    },

    {
        //Safari->Preferences->Privacy->Website tracking->Ask websites not to track me
        description: "The Safari web browser uses the Do-Not-Track HTTP header."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader -bool true"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader -bool false"
    },

    {
        description: "PDF viewing is disabled in the Safari web browser."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WebKitOmitPDFSupport"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitOmitPDFSupport -bool true"
        }
        undo: ""
    },

    {
        //Safari->Preferences->Advanced->Smart Search Field->Show full website address
        //This might help prevent phishing attacks
        description: "Full website addresses are displayed in the location bar of the Safari web browser."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField -bool true"
        }
        undo: defaults -currentHost write ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField -bool false"
    },

    {
        //Safari->Preferences->General->Open "safe" files after downloading
        description: "Files downloaded in Safari are not automatically opened."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads -bool false"
        }
    },
    /* ----END SAFARI BROWSER SETTINGS---- */

    /* ---BEGIN APPLE MAIL SETTINGS--- */

    {
        //Check if the Mail app is closed -- otherwise, it may override changes this app makes.
        description: "The Mail application is currently closed."
        confidence: required
        reference: "https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/defaults.1.html"
        tests:
        [
            {
                type: "exact match"
                command: "ps ax | grep -c '/Applications/Mail.app/Contents/MacOS/Mail'"
                command_pass: 2 //a value of "3" means it's running -- the other 2 are `/bin/sh` and the `grep` command.
                case_sensitive: false
            }
        ]
        fix:
        {
            command:
                killall "Mail" ; sleep 1
        }
    },

    {
        //Mail->Preferences->Viewing->Load remote content in messages
        description: "Apple Mail does not automatically load remote content in e-mails."
        confidence: required
        tests:
        [
            {
                //If Apple Mail is not in use by the user, this test passes
                type: "exact match"
                command: apple_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults read ~/Library/Preferences/com.apple.mail-shared DisableURLLoading"
                command_pass: 1
                command_fail: 0
                case_sensitive: false
            }
        ]
        fix:
        {
            command: "defaults write ~/Library/Preferences/com.apple.mail-shared DisableURLLoading -bool true"
        }
        undo: "defaults write ~/Library/Preferences/com.apple.mail-shared DisableURLLoading -bool false"
    },

    {
        //Mail->Preferences->Junk Mail->Enable junk mail filtering AND When junk mail arrives: Move it to the Junk mailbox
        description: "Mail identified by Apple Mail as junk is sent to the Junk mailbox."
        confidence: required
        tests:
        [
            {
                //If Apple Mail is not in use by the user, this test passes
                type: "exact match"
                command: apple_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Containers/com.apple.mail/Data/Library/Preferences/com.apple.mail JunkMailBehavior"
                command_pass: 2
                case_sensitive: false
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Containers/com.apple.mail/Data/Library/Preferences/com.apple.mail JunkMailBehavior -int 2"
        }
    },

    {
        description: "GPGMail is in use."
        confidence: recommended
        tests:
        [
            {
                type: "exact match"
                command: gpg_mail_in_use
                command_pass: 1
                command_fail: 0
                case_sensitive: false
            }
        ]
        fix:
        {
            manual:
                '''
                1. Visit https://gpgtools.org/ and install GPG Suite. This tool can be used to encrypted and sign emails sent to other PGP users.
                '''
        }
    }

    {
        //Mail->Preferences->GPGMail->Composing->Encrypt new messages by default
        description: "New e-mails composed in Apple Mail are encrypted by GPGMail if the receiver's PGP is present in the keychain."
        confidence: recommended
        tests:
        [
            {
                //If Apple Mail is not in use by the user, this test passes
                type: "exact match"
                command: apple_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                //If GPG Mail is not in use by the user, this test passes
                type: "exact match"
                command: gpg_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults read ~/Library/Preferences/org.gpgtools.gpgmail EncryptNewEmailsByDefault"
                command_pass: 1
                command_fail: 0
                case_sensitive: false
            }
        ]
        fix:
        {
            command: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist EncryptNewEmailsByDefault -bool true"
        }
        undo: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist EncryptNewEmailsByDefault -bool false"
    },

    {
        //Mail->Preferences->GPGMail->Composing->Encrypt drafts
        description: "New e-mails composed in Apple Mail and saved as drafts are encrypted by GPGMail."
        confidence: recommended
        tests:
        [
            {
                //If Apple Mail is not in use by the user, this test passes
                type: "exact match"
                command: apple_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                //If GPG Mail is not in use by the user, this test passes
                type: "exact match"
                command: gpg_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults read ~/Library/Preferences/org.gpgtools.gpgmail OptionallyEncryptDrafts"
                command_pass: 1
                command_fail: 0
                case_sensitive: false
            }
        ]
        fix:
        {
            command: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist OptionallyEncryptDrafts -bool true"
        }
        undo: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist OptionallyEncryptDrafts -bool false"
    },

    {
        //Mail->Preferences->GPGMail->Composing->Sign new messages by default
        description: "New e-mails composed in Apple Mail are signed by GPGMail."
        confidence: required
        tests:
        [
            {
                //If Apple Mail is not in use by the user, this test passes
                type: "exact match"
                command: apple_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                //If GPG Mail is not in use by the user, this test passes
                type: "exact match"
                command: gpg_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults read ~/Library/Preferences/org.gpgtools.gpgmail SignNewEmailsByDefault"
                command_pass: 1
                command_fail: 0
                case_sensitive: false
            }
        ]
        fix:
        {
            command: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist SignNewEmailsByDefault -bool true"
        }
        undo: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist SignNewEmailsByDefault -bool false"
    },

    {
        //Mail->Preferences->GPGMail->Updates->Automatically check for updates
        description: "Apple Mail automatically checks for updates to GPGMail."
        confidence: required
        tests:
        [
            {
                //If Apple Mail is not in use by the user, this test passes
                type: "exact match"
                command: apple_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                //If GPG Mail is not in use by the user, this test passes
                type: "exact match"
                command: gpg_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults read ~/Library/Preferences/org.gpgtools.gpgmail SUEnableAutomaticChecks"
                command_pass: 1
                command_fail: 0
                case_sensitive: false
            }
        ]
        fix:
        {
            command: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist SUEnableAutomaticChecks -bool true"
        }
        undo: "defaults write ~/Library/Preferences/org.gpgtools.gpgmail.plist SUEnableAutomaticChecks -bool false"
    },
    /* ----END APPLE MAIL SETTINGS---- */

    /* ---BEGIN GOOGLE CHROME SETTINGS--- */

    {
        //Check if the Chrome app is closed -- otherwise, it may override changes this app makes.
        description: "The Google Chrome browser is currently closed."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "exact match"
                command: "ps ax | grep -c 'Google Chrome.app'"
                command_pass: 2 //a value of "3" or higher means it's running -- the first 2 are `/bin/sh` and the `grep` command.
                case_sensitive: false
            }
        ]
        fix:
        {
            command:
                killall "Google Chrome" ; sleep 3
        }
    },

    {
        //Chrome->Preferences->Show Advanced Settings->Privacy->Use a web service to help resolve navigation errors
        description: "All Google Chrome web browser profiles prevent information leakage through navigation errors."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' alternate_error_pages.enabled
                command_pass: "^(False\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' alternate_error_pages.enabled -bool false
        }
    },

    {
        //Chrome->Preferences->Show Advanced Settings->Privacy->Automatically report details of possible security incidents to Google
        description: "All Google Chrome web browser profiles prevent information leakage by blocking security incidents reports to Google."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' safebrowsing.extended_reporting_enabled
                command_pass: "^(False\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' safebrowsing.extended_reporting_enabled -bool false
        }
    },

    {
        //Another potentially controversial setting: Enabling Google Safe Browsing. My guess is that, on the whole, this will make machines more secure than it makes them insecure, but it's worth pointing out that there are privacy leaks and that there are allegations of NSA exploitation targeting using this feature. See reference field below.
        //Chrome->Preferences->Show Advanced Settings->Privacy->Protect you and your device from dangerous sites
        description: "All Google Chrome web browser profiles have Google Safe Browsing enabled."
        confidence: "required"
        reference: "https://en.wikipedia.org/wiki/Google_Safe_Browsing"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' safebrowsing.enabled
                command_pass: "^(True\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' safebrowsing.enabled -bool true
        }
    },

    {
        //Chrome->Preferences->Show Advanced Settings->Privacy->Use a web service to help resolve spelling errors
        description: "All Google Chrome web browser profiles prevent information leakage through spell-checking network services."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' spellcheck.use_spelling_service
                command_pass: "^(False\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' spellcheck.use_spelling_service -bool false
        }
    },

    {
        //Chrome->Preferences->Show Advanced Settings->Privacy->Automatically send usage statistics and crash reports to Google
        description: "All Google Chrome web browser profiles prevent information leakage through reporting usage statistics to Google."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    if [ -e "$(ls ~/Library/Application\ Support/Google/Chrome/Consent\ To\ Send\ Stats)" ]; then echo "True"; exit; fi ; echo $(python ./scripts/chrome_defaults.py read ~/Library/Application\ Support/Google/Chrome/Local\ State user_experience_metrics.reporting_enabled)
                command_pass: ".*False$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                rm ~/Library/Application\ Support/Google/Chrome/Consent\ To\ Send\ Stats ; python ./scripts/chrome_defaults.py write "$(ls ~/Library/Application\ Support/Google/Chrome/Local\ State)" user_experience_metrics.reporting_enabled -bool false
        }
    },

    {
        //Chrome->Preferences->Show Advanced Settings->Privacy->Send a "Do Not Track" request with your browsing traffic
        description: "All Google Chrome web browser profiles use the Do-Not-Track HTTP header."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                //This check should short-circuit and match the regex if Chrome is not installed
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' enable_do_not_track
                command_pass: "^(True\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' enable_do_not_track -bool true
        }
    },

    {
        //Users should be strongly discouraged from using NPAPI plugins; see reference. My concern here is that the current warning message in Chrome is not sufficiently scary that merely prompting the user to approve access will allow the average user to make a good security choice, so I'm recommending that unsandboxed plugins be blocked completely.
        //Chrome->Preferences->Show Advanced Settings->Privacy->Content Settings->Unsandboxed plugin access->Do not allow any sites to use a plugin to access your computer
        description: "All Google Chrome web browser profiles block unsandboxed plug-in software."
        confidence: "required"
        reference: "http://superuser.com/questions/654595/adobe-flash-player-ppapi-vs-npapi-in-google-chrome"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' profile.default_content_setting_values.ppapi_broker
                command_pass: "^(2\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' profile.default_content_setting_values.ppapi_broker -int 2
        }
    },

    {
        //Chrome->Preferences->Show Advanced Settings->Passwords and forms->Enable Autofill to fill out web forms in a single click
        description: "All Google Chrome web browser profiles prevent filling personal information into forms automatically."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' autofill.enabled
                command_pass: "^(False\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' autofill.enabled -bool false
        }
    },

    {
        //Chrome->Preferences->Show Advanced Settings->Passwords and forms->Manage passwords->Auto Sign-In
        description: "All Google Chrome web browser profiles have disabled automatic sign-in for stored passwords."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' credentials_enable_autosignin
                command_pass: "^(False\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' credentials_enable_autosignin -bool false
        }
    },

    {
        //Chrome->Preferences->Show Advanced Settings->Google CloudPrint->Show notifications when new printers are detected on network
        description: "All Google Chrome web browser profiles have disabled Google CloudPrint."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' local_discovery.notifications_enabled
                command_pass: "^(False\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' local_discovery.notifications_enabled -bool false
        }
    },

    {
        //Note: I'm not so clear on what 'clear_lso_data_enabled' does. Maybe it should typically be set to true? 'False' is the setting achieved when you disable Flash through the plugins GUI.
        //chrome://plugins/->Adobe Flash Player->Disable
        description: "All Google Chrome web browser profiles block Flash cookies."
        confidence: "required"
        reference: "https://en.wikipedia.org/wiki/Local_shared_object"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' browser.clear_lso_data_enabled
                command_pass: "^(False\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' browser.clear_lso_data_enabled -bool false
        }
    },

    {
        //chrome://plugins/->Adobe Flash Player->Disable
        description: "All Google Chrome web browser profiles have disabled the Chrome Pepper Flash Player plug-in."
        confidence: "required"
        reference: "http://www.newtriks.com/2012/12/01/how-to-disable-the-chrome-pepper-flash-player/"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' browser.pepper_flash_settings_enabled
                command_pass: "^(False\n?)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py write '{}' browser.pepper_flash_settings_enabled -bool false
        }
    },

    {
        //chrome://plugins/->Adobe Flash Player->Disable
        description: "All Google Chrome web browser profiles have disabled the Adobe Shockwave Flash plug-in."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' plugins.plugins_list
                command_pass:
                    ^(\[[^\[]+'enabled': False, 'name': 'Shockwave Flash'[^\]]+\]\n?)+$
                case_sensitive: "false"
            }
        ]
        fix:
        {
            //To simplify syntax, most of this logic has been stored in the "chrome_flash.sh" script
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} ./scripts/chrome_flash.sh '{}'
        }
    },

    {
        //chrome://plugins/->Adobe Flash Player->Disable
        description: "All Google Chrome web browser profiles have disabled the Adobe Flash Player plug-in."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: chrome_is_installed
                command_pass: 0
                case_sensitive: false
            },
            {
                type: "regex match"
                command:
                    find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} python ./scripts/chrome_defaults.py read '{}' plugins.plugins_list
                command_pass:
                    ^(\[[^\[]+'enabled': False, 'name': 'Adobe Flash Player'[^\]]+\]\n?)+$
                case_sensitive: "false"
            }
        ]
        fix:
        {
            //To simplify syntax, most of this logic has been stored in the "chrome_flash.sh" script
            command:
                find ~/Library/Application\ Support/Google/Chrome -name "Preferences" -maxdepth 2 | xargs -I{} ./scripts/chrome_flash.sh '{}'
        }
    },

    {
        description: "Google Chrome is the default web browser."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command:
                    VERSIONER_PERL_PREFER_32_BIT=true perl -MMac::InternetConfig -le 'print +(GetICHelper "http")[1]'
                command_pass: "Google Chrome"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                '''
                1. Install Google Chrome if not already installed.
                2. Open System Preferences.
                3. Select "General".
                4. Under "Default web browser", select "Google Chrome".
                '''
        }
    }

    /* ----END GOOGLE CHROME SETTINGS---- */

    /* --- BEGIN COMMON MALWARE DETECTION --- */
    {
        description: "OSX/Keydnap malware is not present."
        confidence: "required"
        reference: "http://www.welivesecurity.com/2016/08/30/osxkeydnap-spreads-via-signed-transmission-application/"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -e "/Applications/Transmission.app/Contents/Resources/License.rtf" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "/Volumes/Transmission/Transmission.app/Contents/Resources/License.rtf" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "$HOME/Library/Application Support/com.apple.iCloud.sync.daemon/icloudsyncd" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "$HOME/Library/Application Support/com.apple.iCloud.sync.daemon/process.id" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "$HOME/Library/LaunchAgents/com.apple.iCloud.sync.daemon.plist" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "/Library/Application Support/com.apple.iCloud.sync.daemon/" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "/Library/Application Support/com.apple.iCloud.sync.daemon/" ] ; then echo 1 ; else echo 0 ; fi
                command_pass: 0
                command_fail: 1
                case_sensitive: false
            }
        ]
        fix:
        {
            manual:
                '''
                1. One or more of the files associated with the OSX/Keydnap malware was found. Please report this to the authors of osx-config-check via GitHub (https://github.com/kristovatlas/osx-config-check) or Twitter (https://twitter.com/kristovatlas).
                2. Refer to this link: http://www.welivesecurity.com/2016/08/30/osxkeydnap-spreads-via-signed-transmission-application/
                '''
        }
    }

    /* ---- END COMMON MALWARE DETECTION ---- */
]